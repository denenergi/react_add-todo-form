{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","api/users.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","users","id","title","completed","userId","find","people","classNames","TodoList","todos","map","uuidv4","username","App","useState","todosFromServer","setTodos","inputTitle","setInputTitle","selectedUser","setSelectedUser","isInputTitleTitle","setIsInputTitleTitle","isSelectedUser","setIsSelectedUserUser","action","method","onSubmit","event","preventDefault","findSelectedUser","usersFromServer","isValideInputTitle","replace","trim","length","addTodo","Math","max","Number","submitForm","type","value","onChange","target","titleSelect","userSelect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f628d488.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo:React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo:Todo;\n  users: User[]\n};\n\nexport const TodoInfo:React.FC<Props> = ({ todo, users }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const user = users.find(people => people.id === userId) || null;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\" data-cy={title}>\n        {title}\n      </h2>\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n  users: User[]\n};\n\nexport const TodoList:React.FC<Props> = ({ todos, users }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} users={users} key={uuidv4()} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n  const [inputTitle, setInputTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [isInputTitleTitle, setIsInputTitleTitle] = useState(false);\n  const [isSelectedUser, setIsSelectedUserUser] = useState(false);\n\n  function submitForm(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    const findSelectedUser = usersFromServer\n      .find(user => user.name === selectedUser);\n    const isValideInputTitle = inputTitle.replace(/\\s/g, '').trim().length;\n    const createId = Math.max(...todos.map(todo => Number(todo.id)));\n\n    const addTodo = {\n      id: createId,\n      title: inputTitle,\n      completed: false,\n      userId: (findSelectedUser ? findSelectedUser.id : 0),\n    };\n\n    if (isValideInputTitle > 0) {\n      setIsInputTitleTitle(false);\n    } else {\n      setIsInputTitleTitle(true);\n    }\n\n    if (findSelectedUser) {\n      setIsSelectedUserUser(false);\n    } else {\n      setIsSelectedUserUser(true);\n    }\n\n    if (isValideInputTitle > 0 && addTodo.userId !== 0) {\n      setTodos([...todos, addTodo]);\n      setInputTitle('');\n      setSelectedUser('');\n    }\n  }\n\n  function titleSelect(event: React.ChangeEvent<HTMLInputElement>) {\n    setInputTitle(event.target.value);\n    setIsInputTitleTitle(false);\n  }\n\n  function userSelect(event: React.ChangeEvent<HTMLSelectElement>) {\n    setSelectedUser(event.target.value);\n    setIsSelectedUserUser(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          submitForm(event);\n        }}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInputTitle\"\n            value={inputTitle}\n            onChange={(event) => titleSelect(event)}\n          />\n          {isInputTitleTitle\n            && <span className=\"error\">Please enter a title</span>}\n\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={(event) => userSelect(event)}\n          >\n            <option value=\"0\" key={uuidv4()}>Choose a user</option>\n            {[...usersFromServer].map(user => (\n              <option value={user.name} key={uuidv4()}>{user.name}</option>\n            ))}\n          </select>\n          {isSelectedUser\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onChange={() => setTodos(todos)}\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} users={usersFromServer} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}